#########################################################################
# Token specifications for PyMinJ                                       #
# This is a translation of the formal description of the language       #
# into an organized set token families to allow the lexical analyzer    #
# to properly tokenize the language and produce a valid token stream    #
# for the parser                                                        #
# @author Stephen Young (st_youn@encs.concordia.ca)                     #
#########################################################################

# CODE for parsing Configuration files
#
#import ConfigParser
#cparse = ConfigParser.ConfigParser()
#cparse.read('pyminj/pyminj.cfg')
#config = {}
#for key,item in cparse.items("Tokens"):
#    config[key] = item.split(', ')
#    if len(config[key]) == 1: config[key] = config[key][0]
#

################################
# General configuration values #
################################
[Config]
# Defines which token types will require an associated value
store_tk_val = identifier, numeric


#############################################
# Regular Expressions for all pyminj tokens #
#############################################
[Tokens]
# Identifiers are generic and arbitrarily specified names and strings
identifier = (?P<identifier>[a-zA-Z_\$][a-zA-Z0-9_\$]*)
# Numeric constants are any integer values within the min/max range (will be verified by the scanner)
numeric_constant = (?P<numeric_constant>-?\d\d*)
# Character constants are single character values
character_constant = (?p<character_constant>'.')
# Operators to be used in mathematical formulae
operator = +, -, *, /, %, &&, ||
# Comparisons are tokens used to compare two values
comparison = <, >, <=, >=, ==, !=
# Data types are built in types for pyminj
data_type = int, char, void, main, class, new
# Delimiters are variously used logical linguistic boundaries
delimiter = ;, ), (, [, ], }, {, ., ,
# Flow control tokens handle conditions and repetition
flow_control = if, else, while, return
# System IO tokens are used in handling calls to stdin and stdout
system_io = System, in, out
